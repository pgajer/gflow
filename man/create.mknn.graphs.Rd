% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mknn_graphs.R
\name{create.mknn.graphs}
\alias{create.mknn.graphs}
\title{Create Multiple Mutual kNN Graphs with Geometric Pruning}
\usage{
create.mknn.graphs(
  X,
  kmin,
  kmax,
  max.path.edge.ratio.thld = 1.2,
  path.edge.ratio.percentile = 0.5,
  compute.full = FALSE,
  pca.dim = 100,
  variance.explained = 0.99,
  verbose = FALSE
)
}
\arguments{
\item{X}{A numeric matrix where rows represent data points and columns represent
features. Data frames will be converted to matrices.}

\item{kmin}{Minimum k value to consider (positive integer, at least 2).}

\item{kmax}{Maximum k value to consider (must be >= kmin).}

\item{max.path.edge.ratio.thld}{Maximum acceptable ratio of alternative path
length to direct edge length for pruning. Edges with alternative paths having
ratio <= this value will be pruned. Default is 1.2. Set to 0 or negative to
disable pruning.}

\item{path.edge.ratio.percentile}{Percentile threshold (0.0-1.0) for edge
lengths to consider for pruning. Only edges with length greater than this
percentile are evaluated. Default is 0.5.}

\item{compute.full}{Logical; if TRUE, returns complete graph structures for
each k value. If FALSE, returns only summary statistics. Default is FALSE.}

\item{pca.dim}{Maximum number of principal components to use if dimensionality
reduction is applied. Default is 100. Set to NULL to skip dimensionality reduction.}

\item{variance.explained}{Target percentage of variance to be explained by the
principal components (0-1). Default is 0.99. If this can be achieved with
fewer than pca.dim components, the smaller number is used. Set to NULL to
use exactly pca.dim components.}

\item{verbose}{Logical; if TRUE, displays progress messages. Default is FALSE.}
}
\value{
An object of class "mknn_graphs" containing:
\describe{
\item{k_statistics}{A data frame with columns: k (k value), n_edges
(edges before pruning), n_edges_pruned (edges after pruning),
n_removed (number of removed edges), reduction_ratio (proportion of
edges removed).}
\item{pruned_graphs}{If compute.full=TRUE, a named list of pruned graphs
for each k value. NULL otherwise.}
\item{edge_pruning_stats}{A list of pruning statistics for each k value,
containing edge lengths and path ratios.}
}

The returned object also has the following attributes:
\itemize{
\item kmin, kmax: The k range used
\item max.path.edge.ratio.thld: The pruning threshold used
\item path.edge.ratio.percentile: The percentile threshold used
\item pca: If PCA was performed, contains dimensionality reduction details
}
}
\description{
Constructs a series of mutual k-nearest neighbor (MkNN) graphs across a range
of k values, with optional geometric pruning to remove redundant edges based
on alternative path analysis.
}
\details{
This function performs the following steps for each k value:
\enumerate{
\item \strong{Mutual kNN Graph Construction}: Creates a graph where edges exist only
between mutually nearest neighbors.
\item \strong{Geometric Pruning} (optional): Removes edges where alternative paths
exist with acceptable length ratios. An edge (i,j) is pruned if there
exists a path i->k->j such that (d(i,k) + d(k,j)) / d(i,j) <= threshold.
\item \strong{Dimensionality Reduction} (optional): If the data has more than pca.dim
dimensions, PCA is applied before graph construction to improve computational
efficiency and reduce noise.
}

The geometric pruning step helps create sparser graphs by removing edges that
can be well-approximated by two-hop paths, which can improve graph quality
for clustering and visualization tasks.
}
\examples{
\dontrun{
# Generate sample data with clusters
set.seed(123)
n <- 150
X <- rbind(
  matrix(rnorm(n * 2, mean = 0), ncol = 2),
  matrix(rnorm(n * 2, mean = 5), ncol = 2),
  matrix(rnorm(n * 2, mean = c(2.5, 5)), ncol = 2)
)

# Create MkNN graphs for k from 5 to 15 with pruning
result <- create.mknn.graphs(
  X,
  kmin = 5,
  kmax = 15,
  max.path.edge.ratio.thld = 1.2,
  path.edge.ratio.percentile = 0.5,
  compute.full = TRUE,
  verbose = TRUE
)

# Examine the summary statistics
print(result$k_statistics)

# Get the graph for k=10
k10_graph <- result$pruned_graphs[["10"]]
cat("Graph with k=10 has", k10_graph$n_edges, "edges\n")
}

# High-dimensional example with PCA
\dontrun{
# Generate high-dimensional data
set.seed(456)
X_highdim <- matrix(rnorm(200 * 1000), nrow = 200, ncol = 1000)

# Apply PCA before graph construction
result_pca <- create.mknn.graphs(
  X_highdim,
  kmin = 10,
  kmax = 20,
  pca.dim = 50,
  variance.explained = 0.95,
  verbose = TRUE
)

# Check PCA information
pca_info <- attr(result_pca, "pca")
cat("Used", pca_info$n_components, "components explaining",
    round(pca_info$variance_explained * 100, 2), "\% of variance\n")
}

}
\seealso{
\code{\link{create.mknn.graph}} for creating a single MkNN graph,
\code{\link{summary.mknn_graphs}} for summarizing the results
}
