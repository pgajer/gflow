% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adaptive_uggmalo.R
\name{adaptive.uggmalo}
\alias{adaptive.uggmalo}
\title{Adaptive Uniform Grid Graph Model-Averaged Local Linear Regression}
\usage{
adaptive.uggmalo(
  adj.list,
  weight.list,
  y,
  min.path.size,
  n.grid.vertices,
  n.bws,
  min.bw.factor = 0.05,
  max.bw.factor = 0.6,
  max.iterations = 20,
  precision = 1e-04,
  dist.normalization.factor = 1.1,
  kernel.type = 7L,
  tolerance = 1e-06,
  n.bb = 0L,
  cri.probability = 0.95,
  n.perms = 0L,
  blending.coef = 0.1,
  verbose = FALSE
)
}
\arguments{
\item{adj.list}{List of integer vectors. Each vector contains indices of vertices
adjacent to the corresponding vertex. Indices should be 1-based.}

\item{weight.list}{List of numeric vectors. Each vector contains weights of edges
corresponding to adjacencies in adj.list.}

\item{y}{Numeric vector of response values at each vertex.}

\item{min.path.size}{Integer. Minimum number of vertices required in valid paths.}

\item{n.grid.vertices}{Integer. Number of vertices in uniform grid representation.}

\item{n.bws}{Integer. Number of candidate bandwidths to evaluate.}

\item{min.bw.factor}{Numeric. Factor multiplied by graph diameter for minimum bandwidth.}

\item{max.bw.factor}{Numeric. Factor multiplied by graph diameter for maximum bandwidth.}

\item{max.iterations}{Integer. Maximum number of iterations for convergence.}

\item{precision}{Numeric. Precision threshold for numerical computations.}

\item{dist.normalization.factor}{Numeric. Factor for normalizing graph distances.}

\item{kernel.type}{Integer. Type of kernel function (1: Gaussian, 2: Triangular).}

\item{tolerance}{Numeric. Convergence tolerance for model fitting.}

\item{n.bb}{Integer. Number of bootstrap iterations (0 for no bootstrap).}

\item{cri.probability}{Numeric. Confidence level for bootstrap intervals (0-1).}

\item{n.perms}{Integer. Number of permutation test iterations (0 for no testing).}

\item{blending.coef}{Numeric. Blending coefficient for model averaging.}

\item{verbose}{Logical. Whether to print progress information.}
}
\value{
A list containing:
\describe{
\item{graph.diameter}{Numeric. Computed diameter of input graph.}
\item{grid.opt.bw}{Numeric vector. Optimal bandwidth for each grid vertex.}
\item{predictions}{Numeric vector. Model-averaged predictions for original vertices.}
\item{grid.predictions}{Numeric vector. Model-averaged predictions for grid vertices.}
\item{bb.predictions}{Matrix. Bootstrap predictions (if n.bb > 0).}
\item{cri.lower}{Numeric vector. Lower confidence bounds (if n.bb > 0).}
\item{cri.upper}{Numeric vector. Upper confidence bounds (if n.bb > 0).}
\item{null.predictions}{Matrix. Permutation test predictions (if n.perms > 0).}
\item{p.values}{Numeric vector. Vertex-wise p-values (if n.perms > 0).}
\item{effect.sizes}{Numeric vector. Effect sizes (if n.perms > 0).}
\item{significant.vertices}{Logical vector. Significance indicators (if n.perms > 0).}
}
}
\description{
Performs model-averaged local linear regression on graph-structured data using an adaptive
uniform grid approach. This method combines graph structure preservation with local linear
modeling to capture both global and local patterns in the data.
}
\details{
The adaptive UGGMALO algorithm proceeds through several steps:
\enumerate{
\item Creates a uniform grid representation of the input graph
\item Computes optimal bandwidths using cross-validation
\item Fits local linear models along paths through the graph
\item Combines predictions using model averaging
}

The function supports optional bootstrap confidence intervals and permutation testing
for statistical inference.
}
\examples{
\dontrun{
# Create a simple graph with 3 vertices
adj.list <- list(c(2), c(1, 3), c(2))
weight.list <- list(c(1), c(1, 1), c(1))
y <- c(1, 2, 3)

# Run basic analysis
result <- adaptive.uggmalo(
  adj.list = adj.list,
  weight.list = weight.list,
  y = y,
  min.path.size = 2,
  n.grid.vertices = 5,
  n.bws = 10
)

# Run with bootstrap confidence intervals
result.boot <- adaptive.uggmalo(
  adj.list = adj.list,
  weight.list = weight.list,
  y = y,
  min.path.size = 2,
  n.grid.vertices = 5,
  n.bws = 10,
  n.bb = 100
)
}

}
