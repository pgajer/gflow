% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/magelog.R
\name{magelog}
\alias{magelog}
\title{Grid-based Model Averaged Bandwidth Logistic Regression}
\usage{
magelog(
  x,
  y,
  grid.size = 200,
  fit.quadratic = FALSE,
  pilot.bandwidth = -1,
  kernel = 7L,
  min.points = NULL,
  cv.folds = 5L,
  n.bws = 50L,
  min.bw.factor = 0.05,
  max.bw.factor = 0.9,
  max.iterations = 100L,
  ridge.lambda = 1e-06,
  tolerance = 1e-08,
  with.bw.predictions = TRUE
)
}
\arguments{
\item{x}{Numeric vector of predictor variables. Must not contain missing, infinite,
or non-numeric values.}

\item{y}{Binary numeric vector (0 or 1) of response variables. Must be the same
length as \code{x} and contain only 0s and 1s.}

\item{grid.size}{Integer; number of points in the uniform grid where local models
are centered. Must be at least 2. Larger values provide smoother predictions but
increase computation time. Default is 200.}

\item{fit.quadratic}{Logical; whether to include quadratic terms in the local models.
If \code{TRUE}, local quadratic logistic regression is used; if \code{FALSE},
local linear logistic regression is used. Default is \code{FALSE}.}

\item{pilot.bandwidth}{Numeric; bandwidth for local fitting. If less than or equal to 0,
bandwidth is automatically selected using cross-validation. The bandwidth controls
the size of the local neighborhood used for fitting. Default is -1 (automatic selection).}

\item{kernel}{Integer; kernel type for weight calculation:
\describe{
\item{1}{Epanechnikov kernel}
\item{2}{Triangular kernel}
\item{4}{Laplace kernel}
\item{5}{Normal (Gaussian) kernel}
\item{6}{Biweight kernel}
\item{7}{Tricube kernel (default)}
}}

\item{min.points}{Integer or \code{NULL}; minimum number of points required for local fitting.
If \code{NULL}, automatically set to 3 for linear models or 4 for quadratic models.
Must be at least 3 for linear models and 4 for quadratic models to ensure identifiability.
Default is \code{NULL}.}

\item{cv.folds}{Integer; number of cross-validation folds for bandwidth selection.
Must be at least 3 and cannot exceed the number of observations. Higher values
provide more stable bandwidth selection but increase computation time. Default is 5.}

\item{n.bws}{Integer; number of bandwidths to try in automatic selection. Must be
at least 2. More bandwidths provide finer resolution but increase computation time.
Default is 50.}

\item{min.bw.factor}{Numeric; minimum bandwidth factor relative to data range. Must be
positive and less than 1. Controls the smallest bandwidth to consider as a fraction
of the x-range. Default is 0.05.}

\item{max.bw.factor}{Numeric; maximum bandwidth factor relative to data range. Must be
greater than \code{min.bw.factor}. Controls the largest bandwidth to consider as a
fraction of the x-range. Default is 0.9.}

\item{max.iterations}{Integer; maximum number of iterations for local fitting algorithm.
Must be positive. Default is 100.}

\item{ridge.lambda}{Numeric; ridge parameter for numerical stability in local fitting.
Must be positive. Larger values provide more stability but may introduce bias.
Default is 1e-6.}

\item{tolerance}{Numeric; convergence tolerance for local fitting algorithm. Must be
positive. Smaller values provide more precise convergence but may increase iterations.
Default is 1e-8.}

\item{with.bw.predictions}{Logical; whether to return predictions for all bandwidth
values tried during cross-validation. If \code{TRUE}, allows examination of how
predictions vary with bandwidth. Default is \code{TRUE}.}
}
\value{
A list of class \code{"magelog"} containing:
\describe{
\item{\code{x.grid}}{Numeric vector of uniform grid points where local models are centered}
\item{\code{predictions}}{Numeric vector of predicted probabilities at original x points}
\item{\code{bw.grid.predictions}}{Matrix of predictions at grid points for each bandwidth
(only if \code{with.bw.predictions = TRUE}). Rows correspond to grid points, columns
to different bandwidths}
\item{\code{mean.brier.errors}}{Numeric vector of cross-validation Brier scores for each bandwidth}
\item{\code{opt.brier.bw.idx}}{Integer index of optimal bandwidth minimizing Brier score}
\item{\code{bws}}{Numeric vector of bandwidth values tried}
\item{\code{fit.info}}{List containing fitting parameters used}
\item{\code{x}}{Original predictor values (sorted if necessary)}
\item{\code{y}}{Original response values (sorted to match x)}
}
}
\description{
Performs model-averaged bandwidth logistic regression using local polynomial fitting.
The function implements a flexible approach to binary regression by fitting local
models at points of a uniform grid spanning the range of predictor values. Multiple
local models are combined to produce robust predictions. It supports both linear and
quadratic local models, automatic bandwidth selection via cross-validation, and
various kernel types for weight calculation.
}
\details{
The function fits local logistic regression models centered at points of a uniform
grid spanning the range of x values. Local models are fit using kernel-weighted
maximum likelihood estimation with optional ridge regularization for numerical stability.

The bandwidth parameter controls the size of the local neighborhood used for each
local fit. When \code{pilot.bandwidth <= 0}, the function automatically selects an
optimal bandwidth using k-fold cross-validation to minimize the Brier score.

Local models can be either linear or quadratic (controlled by \code{fit.quadratic}).
For numerical stability, each local fit requires a minimum number of points: at least
3 for linear models and 4 for quadratic models.

Predictions at the original x points are obtained by linear interpolation from the
grid-based predictions. This grid-based approach provides computational efficiency
and naturally smooth prediction curves.

The function uses compiled C++ code for computational efficiency, particularly
important when performing cross-validation over multiple bandwidth values.
}
\examples{
\dontrun{
# Generate example data with logistic relationship
set.seed(123)
n <- 200
x <- seq(0, 1, length.out = n)
# True probability function
p_true <- 1/(1 + exp(-(x - 0.5)*10))
y <- rbinom(n, 1, p_true)

# Fit model with automatic bandwidth selection
fit <- magelog(x, y, grid.size = 100, fit.quadratic = FALSE, cv.folds = 5)

# Plot results
plot(x, y, pch = 19, col = adjustcolor("black", 0.5),
     xlab = "x", ylab = "Probability",
     main = "Local Logistic Regression")
# Add true probability curve
lines(x, p_true, col = "gray", lwd = 2, lty = 2)
# Add fitted curve
lines(fit$x.grid, fit$bw.grid.predictions[, fit$opt.brier.bw.idx],
      col = "red", lwd = 2)
legend("topleft", c("True probability", "Fitted curve", "Data"),
       col = c("gray", "red", "black"), lty = c(2, 1, NA),
       pch = c(NA, NA, 19), lwd = c(2, 2, NA))

# Examine bandwidth selection
plot(fit$bws, fit$mean.brier.errors, type = "b",
     xlab = "Bandwidth", ylab = "Cross-validation Brier Score",
     main = "Bandwidth Selection")
abline(v = fit$bws[fit$opt.brier.bw.idx], col = "red", lty = 2)
}

}
\references{
Loader, C. (1999). Local Regression and Likelihood. Springer-Verlag.

Fan, J. and Gijbels, I. (1996). Local Polynomial Modelling and Its Applications.
Chapman & Hall.
}
\seealso{
\code{\link{predict.magelog}} for making predictions on new data,
}
