% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_utils.R
\name{compare.adj.lists}
\alias{compare.adj.lists}
\title{Compare Two Adjacency Lists}
\usage{
compare.adj.lists(adj.list1, adj.list2)
}
\arguments{
\item{adj.list1}{A list of integer vectors, where each vector represents the
adjacency list for a vertex in the first graph.}

\item{adj.list2}{A list of integer vectors, where each vector represents the
adjacency list for a vertex in the second graph.}
}
\value{
A logical value; \code{TRUE} if the two adjacency lists are equivalent
for all corresponding vertices, otherwise \code{FALSE}.
}
\description{
This function compares two adjacency lists to check if they are equivalent,
meaning each vertex's list of neighbors in the first adjacency list contains
exactly the same set of neighbors as in the corresponding list in the second
adjacency list, regardless of order.
}
\details{
The function performs a length check on the adjacency lists and then uses
\code{setequal} for each corresponding pair of sub-lists to verify equivalence
of the adjacency sets. This function is useful for verifying the equality of
graphs in terms of connectivity, ignoring the order of nodes in the adjacency
lists and potential multiple edges between nodes.
}
\examples{
adj.list1 <- list(c(2, 3), c(1, 3), c(1, 2))
adj.list2 <- list(c(3, 2), c(3, 1), c(2, 1))
compare.adj.lists(adj.list1, adj.list2) # returns TRUE

adj.list1 <- list(c(2, 3, 4), c(1, 3), c(1, 2), c(1))
adj.list2 <- list(c(3, 2), c(3, 1), c(2, 1), c(1))
compare.adj.lists(adj.list1, adj.list2) # returns FALSE

}
