% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amagelogit.R
\name{amagelogit}
\alias{amagelogit}
\title{Grid-based Model Averaged Bandwidth Logistic Regression}
\usage{
amagelogit(
  x,
  y,
  grid.size = 200,
  fit.quadratic = FALSE,
  pilot.bandwidth = -1,
  kernel = 7L,
  min.points = NULL,
  cv.folds = 5L,
  n.bws = 50L,
  min.bw.factor = 0.05,
  max.bw.factor = 0.9,
  max.iterations = 100L,
  ridge.lambda = 1e-06,
  tolerance = 1e-08,
  with.bw.predictions = TRUE
)
}
\arguments{
\item{x}{Numeric vector of predictor variables}

\item{y}{Binary vector (0 or 1) of response variables}

\item{grid.size}{Integer; number of points in the uniform grid where local models
are centered. Default is 200}

\item{fit.quadratic}{Logical; whether to include quadratic terms in the local models.
Default is FALSE}

\item{pilot.bandwidth}{Numeric; bandwidth for local fitting. If <= 0, bandwidth
is automatically selected. Default is -1}

\item{kernel}{Integer; kernel type for weight calculation:
\itemize{
\item 1: Epanechnikov
\item 2: Triangular
\item 4: Laplace
\item 5: Normal
\item 6: Biweight
\item 7: Tricube (default)
}}

\item{min.points}{Integer; minimum number of points required for local fitting.
Default is automatically set based on fit.quadratic (4 for quadratic, 3 for linear)}

\item{cv.folds}{Integer; number of cross-validation folds for bandwidth selection.
If 0, LOOCV approximation is used. Default is 0}

\item{n.bws}{Integer; number of bandwidths to try in automatic selection. Default is 50}

\item{min.bw.factor}{Numeric; minimum bandwidth factor relative to data range. Default is 0.05}

\item{max.bw.factor}{Numeric; maximum bandwidth factor relative to data range. Default is 0.9}

\item{max.iterations}{Integer; maximum number of iterations for local fitting. Default is 100}

\item{ridge.lambda}{Numeric; ridge parameter for local fitting. Default is 1e-6}

\item{tolerance}{Numeric; convergence tolerance for local fitting. Default is 1e-8}

\item{with.bw.predictions}{Logical; whether to return predictions for all bandwidths. Default is TRUE}
}
\value{
A list containing:
\itemize{
\item x.grid: Uniform grid points where local models are centered
\item predictions: Predicted probabilities at original x points
\item bw.grid.predictions: Matrix of predictions at grid points for each bandwidth
\item mean.brier.errors: Cross-validation errors for each bandwidth
\item opt.brier.bw.idx: Index of optimal bandwidth
\item bws: Vector of tried bandwidths
\item fit.info: List of fitting parameters used
\item x: Original predictor values
\item y: Original response values
}
}
\description{
Performs model-averaged bandwidth logistic regression using local polynomial fitting.
The function implements a flexible approach to binary regression by fitting local
models at points of a uniform grid spanning the range of predictor values. Multiple
local models are combined to produce robust predictions. It supports both linear and
quadratic local models, automatic bandwidth selection, and various kernel types
for weight calculation.
}
\details{
The function fits local logistic regression models centered at points of a uniform
grid spanning the range of x values. Local models are fit using kernel-weighted
maximum likelihood. The bandwidth determines the size of the local neighborhood.
When pilot.bandwidth <= 0, the function automatically selects a bandwidth using
cross-validation.

The local models can be either linear or quadratic (controlled by fit.quadratic).
For numerical stability, the minimum number of points in each local fit is automatically
set to 3 for linear and 4 for quadratic models, but can be overridden with min.points.

Predictions at the original x points are obtained by linear interpolation from the
grid-based predictions. The grid approach provides computational efficiency and
smooth prediction curves.
}
\examples{
\dontrun{
x <- seq(0, 1, length.out = 100)
p <- 1/(1 + exp(-(x - 0.5)*10))
y <- rbinom(100, 1, p)
fit <- amagelogit(x, y, grid.size = 200, fit.quadratic = TRUE, cv.folds = 5)
plot(x, y)
lines(fit$x.grid, fit$bw.grid.predictions[,fit$opt.brier.bw.idx], col = "red")
}

}
