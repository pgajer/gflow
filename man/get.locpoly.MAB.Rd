% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bias_utils.R
\name{get.locpoly.MAB}
\alias{get.locpoly.MAB}
\title{Estimate Mean Absolute Bias (MAB) of Local Polynomial Regression}
\usage{
get.locpoly.MAB(x, y, xt, yt, folds, bandwidths)
}
\arguments{
\item{x}{A numeric vector representing the predictor variable for the training set.}

\item{y}{A numeric vector representing the response variable for the training set.}

\item{xt}{A numeric vector representing the predictor variable for the test set.}

\item{yt}{A numeric vector representing the response variable for the test set.}

\item{folds}{A list of indices for cross-validation folds}

\item{bandwidths}{A numeric vector of bandwidth values to be tested.}
}
\value{
A list containing:
\describe{
\item{MAB}{Mean Absolute Bias calculated on the test set}
\item{RMSE}{Root Mean Square Error}
\item{predictions}{Predictions made by the local polynomial regression model on the test set}
\item{residuals}{Absolute residuals}
\item{parameters}{List containing the optimal bandwidth}
}
}
\description{
Fits a local polynomial regression model to the given dataset and evaluates its
performance using cross-validation. The mean absolute error (MAE) is used as the
performance metric, and the function selects the optimal bandwidth for the local
polynomial regression.
}
\details{
The function performs cross-validation to find the optimal bandwidth that
minimizes the MAE. It uses the \code{locpoly} function from the KernSmooth package
for fitting local polynomial models. The optimal bandwidth is then used to fit the
final model and make predictions on the test set.
}
\examples{
\dontrun{
# Generate example data
set.seed(123)
x <- runif(100, 0, 10)
y <- sin(x) + rnorm(100, sd = 0.1)
xt <- seq(0, 10, length.out = 50)
yt <- sin(xt)

# Create cross-validation folds
folds <- create.folds(y, k = 10, list = TRUE, returnTrain = TRUE)

# Define bandwidth values
bandwidths <- seq(0.1, 1, by = 0.1)

# Run the function
result <- get.locpoly.MAB(x, y, xt, yt, folds, bandwidths)
print(result$MAB)
}

}
