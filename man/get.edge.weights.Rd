% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_utils.R
\name{get.edge.weights}
\alias{get.edge.weights}
\title{Get Unique Edge Weights from a Weighted Graph in Parallel}
\usage{
get.edge.weights(adj.list, weight.list, n.cores = 12)
}
\arguments{
\item{adj.list}{A list where each element contains the adjacency list for a vertex.
Element i contains a vector of vertices that are adjacent to vertex i.}

\item{weight.list}{A list with the same structure as \code{adj.list}, where \code{weight.list[[i]][j]}.
contains the weight of the edge between vertex i and its j-th neighbor.}

\item{n.cores}{Number of cores to use for parallel processing. Default is 2.}
}
\value{
A numeric vector containing the weights of all unique edges in the graph.
}
\description{
Returns a vector containing the weights of all edges in a weighted graph
without duplication, using parallel processing for improved performance
on large graphs.
}
\details{
The function parallelizes the processing by dividing the vertices among different cores.
It handles undirected graphs by only processing edges where i < neighbor to ensure
each edge is counted exactly once.
The function requires the foreach and doParallel packages.
}
\examples{
\dontrun{
# Create a simple undirected weighted graph
adj.list <- list(c(2, 3), c(1, 3), c(1, 2))
weight.list <- list(c(5, 10), c(5, 7), c(10, 7))

# Get weights of all edges using 2 cores
edge_weights <- get.edge.weights(adj.list, weight.list, n.cores = safe_cores(1))
}

}
