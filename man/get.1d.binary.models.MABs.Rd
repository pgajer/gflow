% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bias_utils.R
\name{get.1d.binary.models.MABs}
\alias{get.1d.binary.models.MABs}
\title{Estimate Mean Absolute Bias for Multiple Non-linear Regression Models with Binary Outcome}
\usage{
get.1d.binary.models.MABs(
  xt,
  df,
  y.min = -3,
  y.max = 3,
  n.subsamples = 100,
  verbose = TRUE,
  n.cores = 10
)
}
\arguments{
\item{xt}{A numeric vector of predictor values. Its length must equal the number of rows of df.}

\item{df}{A data frame or matrix of smooth function values (columns) over xt values.
These will be transformed via min-max normalization and inverse logit function.}

\item{y.min}{The target minimum for min-max transformation (default = -3).}

\item{y.max}{The target maximum for min-max transformation (default = 3).}

\item{n.subsamples}{The number of elements to randomly sample from the predictor and response
variables. Must be less than or equal to the number of rows of df (default = 100).}

\item{verbose}{Logical indicating whether to print progress messages (default = TRUE).}

\item{n.cores}{The number of cores to use for parallel computation (default = 10).}
}
\value{
A list containing:
\describe{
\item{MAB.df}{A data frame of MAB estimates with rows corresponding to columns of df
and columns corresponding to different models}
\item{RMSE.df}{A data frame of RMSE estimates with the same structure as MAB.df}
\item{model.run.times.df}{A data frame of run times for each model (if n.cores = 1)}
}
}
\description{
Compares the performance of different non-linear regression models for binary outcomes
by estimating their Mean Absolute Bias (MAB) on synthetic data.
}
\details{
This function tests the following models for binary outcomes:
\itemize{
\item rf: Random Forest
\item magelo1: Robust Local Linear Model (degree 1)
\item magelo2: Robust Local Linear Model (degree 2)
\item spline: GAM spline regression
\item glmnet.poly: Regularized polynomial regression
\item loess: Local polynomial regression
}

The function transforms the smooth functions in df to probabilities using
min-max normalization followed by the inverse logit transformation, then
generates binary outcomes by sampling from these probabilities.
}
\examples{
\dontrun{
# Generate synthetic data
set.seed(123)
n <- 200
xt <- seq(0, 10, length.out = n)
df <- data.frame(
  linear = xt,
  quadratic = xt^2 / 10,
  sine = sin(xt) * 5,
  exponential = exp(xt/5) - 1
)

# Compare models for binary outcomes
results <- get.1d.binary.models.MABs(xt, df, n.subsamples = 100, n.cores = 1)
print(results$MAB.df)
}

}
