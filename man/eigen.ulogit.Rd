% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ulogit.R
\name{eigen.ulogit}
\alias{eigen.ulogit}
\title{Fit Univariate Logistic Regression Using Eigen}
\usage{
eigen.ulogit(
  x,
  y,
  w = NULL,
  fit.quadratic = FALSE,
  with.errors = TRUE,
  max.iterations = 100L,
  ridge.lambda = 0.002,
  tolerance = 1e-08
)
}
\arguments{
\item{x}{Numeric vector of predictor values. Must contain only finite values
(no NA, NaN, or Inf).}

\item{y}{Binary response vector containing only 0 or 1 values. Must be the
same length as \code{x}.}

\item{w}{Optional numeric vector of non-negative observation weights. If
\code{NULL} (default), all observations are given equal weight. Must be
the same length as \code{x} if provided.}

\item{fit.quadratic}{Logical; if \code{TRUE}, includes a quadratic term
(\eqn{x^2}) in the model. Default is \code{FALSE}.}

\item{with.errors}{Logical indicating whether to compute leave-one-out
cross-validation errors. Default is \code{TRUE}. Setting to \code{FALSE}
can improve performance for large datasets.}

\item{max.iterations}{Maximum number of Newton-Raphson iterations. Must be
a positive integer. Default is 100.}

\item{ridge.lambda}{Ridge regularization parameter for numerical stability.
Must be non-negative. Default is 0.002. Applied to all non-intercept
coefficients.}

\item{tolerance}{Convergence tolerance for Newton-Raphson algorithm. The
algorithm stops when the relative change in log-likelihood is less than
this value. Must be positive. Default is 1e-8.}
}
\value{
A list of class \code{"eigen.ulogit"} containing:
\describe{
\item{predictions}{Numeric vector of fitted probabilities}
\item{converged}{Logical indicating whether the algorithm converged}
\item{iterations}{Integer giving the number of iterations used}
\item{beta}{Numeric vector of coefficients: intercept, linear coefficient,
and (if \code{fit.quadratic = TRUE}) quadratic coefficient}
\item{errors}{If \code{with.errors = TRUE}, numeric vector of leave-one-out
cross-validation errors; otherwise \code{NULL}}
\item{loglik}{Final log-likelihood value}
\item{aic}{Akaike Information Criterion}
\item{bic}{Bayesian Information Criterion}
\item{call}{The matched call}
\item{model}{Character string indicating model type ("linear" or "quadratic")}
}
}
\description{
Fits a univariate logistic regression model using the Eigen linear algebra
library for enhanced numerical stability. This function supports both linear
and quadratic models with optional observation weights and provides efficient
leave-one-out cross-validation.
}
\details{
For the linear model (\code{fit.quadratic = FALSE}), the function fits:
\deqn{logit(p_i) = \beta_0 + \beta_1 x_i}

For the quadratic model (\code{fit.quadratic = TRUE}), it fits:
\deqn{logit(p_i) = \beta_0 + \beta_1 x_i + \beta_2 x_i^2}

The implementation uses the Eigen C++ library for linear algebra operations,
providing enhanced numerical stability compared to standard BLAS/LAPACK
routines, particularly for ill-conditioned problems.

Ridge regularization is applied to non-intercept coefficients to prevent
overfitting and improve numerical stability. The penalty term added to the
negative log-likelihood is \eqn{\lambda (\beta_1^2 + \beta_2^2)}.
}
\examples{
# Generate example data with non-linear relationship
set.seed(456)
x <- runif(150, -3, 3)
true_prob <- 1/(1 + exp(-(1 + 2*x - 0.5*x^2)))
y <- rbinom(150, 1, prob = true_prob)

# Fit linear model
fit_linear <- eigen.ulogit(x, y)

# Fit quadratic model
fit_quad <- eigen.ulogit(x, y, fit.quadratic = TRUE)

# Compare models using AIC
cat("Linear model AIC:", fit_linear$aic, "\n")
cat("Quadratic model AIC:", fit_quad$aic, "\n")

# Plot both fits
ord <- order(x)
plot(x, y, pch = 16, col = ifelse(y == 1, "blue", "red"),
     main = "Linear vs Quadratic Logistic Regression")
lines(x[ord], fit_linear$predictions[ord], lwd = 2, col = "green")
lines(x[ord], fit_quad$predictions[ord], lwd = 2, col = "purple")
legend("topleft", c("y = 1", "y = 0", "Linear", "Quadratic"),
       col = c("blue", "red", "green", "purple"),
       pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1))

# Example with weights and without errors for efficiency
w <- runif(150, 0.5, 2)
fit_fast <- eigen.ulogit(x, y, w = w, with.errors = FALSE)

# Access coefficients
cat("Quadratic model coefficients:\n")
cat("  Intercept:", fit_quad$beta[1], "\n")
cat("  Linear:", fit_quad$beta[2], "\n")
cat("  Quadratic:", fit_quad$beta[3], "\n")

}
\references{
McCullagh, P., & Nelder, J. A. (1989). Generalized Linear Models (2nd ed.).
Chapman and Hall/CRC.
}
\seealso{
\code{\link{ulogit}} for the standard implementation,
\code{\link[stats]{glm}} for general linear models,
\code{\link{predict.eigen.ulogit}} for predictions on new data
}
