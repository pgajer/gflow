% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bias_utils.R
\name{get.glmnet.poly.MAB}
\alias{get.glmnet.poly.MAB}
\title{Estimate Mean Absolute Bias (MAB) of Regularized Polynomial Regression Model}
\usage{
get.glmnet.poly.MAB(
  x,
  y,
  xt,
  yt,
  folds,
  lambda.sequence = NULL,
  alpha = 1,
  y.binary = TRUE
)
}
\arguments{
\item{x}{A numeric vector representing the predictor variable for the training set.}

\item{y}{A numeric vector representing the response variable for the training set.}

\item{xt}{A numeric vector representing the predictor variable for the test set.}

\item{yt}{A numeric vector representing the true response values for the test set.}

\item{folds}{A list of indices for cross-validation folds (currently not used).}

\item{lambda.sequence}{A numeric vector of lambda values to test (default = NULL, uses glmnet default).}

\item{alpha}{The elastic net mixing parameter (default = 1 for lasso, 0 for ridge).}

\item{y.binary}{Logical indicating if y is binary (default = TRUE).}
}
\value{
A list containing:
\describe{
\item{MAB}{Mean Absolute Bias calculated on the test set}
\item{RMSE}{Root Mean Square Error}
\item{predictions}{Predictions made by the glmnet model on the test set}
\item{residuals}{Absolute residuals}
\item{parameters}{List containing optimal lambda value}
}
}
\description{
Fits a regularized polynomial regression model using elastic net regularization
via the glmnet package. The function creates polynomial features (x, x², x³) and
uses cross-validation to select the optimal regularization parameter lambda.
}
\details{
This function creates polynomial features (x, x², x³) to capture non-linear
relationships. It uses cv.glmnet for automatic cross-validation to select the optimal
lambda parameter. The alpha parameter controls the type of regularization:
\itemize{
\item alpha = 1: Lasso regression (L1 penalty)
\item alpha = 0: Ridge regression (L2 penalty)
\item 0 < alpha < 1: Elastic net (combination of L1 and L2)
}

For binary outcomes, it uses binomial family with logit link.
For continuous outcomes, it uses gaussian family.
}
\note{
Consider renaming this function to get.glmnet.poly.MAB to better reflect
that it uses polynomial features rather than splines.
}
\examples{
\dontrun{
# Example with continuous outcome
set.seed(123)
x <- seq(-2, 2, length.out = 100)
y <- x^2 + rnorm(100, sd = 0.5)
xt <- seq(-2, 2, length.out = 50)
yt <- xt^2

# Create cross-validation folds (not used internally)
folds <- create.folds(y, k = 10, list = TRUE, returnTrain = TRUE)

# Fit model
result <- get.glmnet.poly.MAB(x, y, xt, yt, folds, alpha = 1, y.binary = FALSE)
print(result$MAB)

# Example with binary outcome
y.binary <- rbinom(100, 1, plogis(x^2))
yt.binary <- plogis(xt^2)
result.binary <- get.glmnet.poly.MAB(x, y.binary, xt, yt.binary, folds, y.binary = TRUE)
print(result.binary$MAB)
}

}
