% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/centered_paths.R
\name{ugg.get.path.data}
\alias{ugg.get.path.data}
\title{Create a Refined Graph with Uniformly Spaced Grid Vertices and creates local paths through the specified ref vertex}
\usage{
ugg.get.path.data(
  adj.list,
  weight.list,
  grid.size,
  y,
  ref.vertex,
  bandwidth,
  dist.normalization.factor = 1.01,
  min.path.size = 5L,
  diff.threshold = 5L,
  kernel.type = 7L,
  verbose = FALSE
)
}
\arguments{
\item{adj.list}{A list where each element \code{i} is an integer vector containing the
indices of vertices adjacent to vertex \code{i}. Vertex indices must be 1-based.
The graph structure must be undirected, meaning if vertex \code{j} appears in
\code{adj.list[[i]]}, then vertex \code{i} must appear in \code{adj.list[[j]]}.}

\item{weight.list}{A list matching the structure of adj.list, where each element
contains the corresponding edge weights (typically distances or lengths).
\code{weight.list[[i]][j]} should contain the weight of the edge between vertex \code{i}
and vertex \code{adj.list[[i]][j]}. Weights must be positive numbers.}

\item{grid.size}{A positive integer specifying the desired number of grid vertices
to add. The actual number of added vertices may differ slightly from this
target due to the distribution of edge lengths in the graph.}

\item{y}{A numeric vector of values associated with each vertex in the graph.}

\item{ref.vertex}{An integer specifying the reference vertex around which paths are constructed (1-based indexing).}

\item{bandwidth}{A positive numeric value specifying the maximum allowable path distance from the reference vertex.}

\item{dist.normalization.factor}{A numeric value between 0 and 1 for normalizing distances in kernel calculations (default: 1.01).}

\item{min.path.size}{An integer specifying the minimum number of vertices required in a valid path (default: 5).}

\item{diff.threshold}{An integer specifying the number of vertices after the ref vertex that two paths have to have different (set intersection is empty) to produce a composite path from these two paths}

\item{kernel.type}{An integer specifying the kernel function type:
- 1: Epanechnikov
- 2: Triangular
- 4: Laplace
- 5: Normal
- 6: Biweight
- 7: Tricube (default)}

\item{verbose}{Logical indicating whether to print progress information. Default is FALSE.}
}
\value{
A list where each element represents a path and contains:
\item{vertices}{Integer vector of path vertices (1-based indices)}
\item{ref_vertex}{Integer indicating the reference vertex (1-based index)}
\item{rel_center_offset}{Numeric value indicating relative position of reference vertex (0 = center, 0.5 = endpoint)}
\item{total_weight}{Numeric value representing total path length}
\item{x_path}{Numeric vector of cumulative distances along path from start}
\item{w_path}{Numeric vector of kernel weights for each vertex}
\item{y_path}{Numeric vector of y-values for path vertices}
}
\description{
Creates a refined version of an input graph by adding grid vertices (points) along
its edges. The grid vertices are placed to maintain approximately uniform spacing
throughout the graph structure. This function is particularly useful for tasks
that require a denser sampling of points along the graph edges, such as
graph-based interpolation or spatial analysis.

Analyzes paths in a graph centered around a reference vertex, computing distances,
kernel weights, and associated values along these paths. The function identifies
both single paths and composite paths that meet the minimum size requirement,
with the reference vertex serving as a central point in the path structure.
}
