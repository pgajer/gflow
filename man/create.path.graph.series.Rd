% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/path_graphs.R
\name{create.path.graph.series}
\alias{create.path.graph.series}
\title{Create a Series of Path Graphs with Different Hop Limits}
\usage{
create.path.graph.series(graph, edge.lengths, h.values)
}
\arguments{
\item{graph}{A list where each element \code{i} is a numeric vector containing the
indices of vertices adjacent to vertex \code{i}. Indices should be 1-based.}

\item{edge.lengths}{A list with the same structure as \code{graph} where each
element \code{i} contains the weights/lengths of the edges specified in
\code{graph[[i]]}.}

\item{h.values}{Integer vector specifying the hop limits for which to compute
path graphs. All values must be >= 1. Values will be sorted in ascending
order internally.}
}
\value{
A list of path.graph objects, one for each value in \code{h.values},
with class "path.graph.series". Each path graph has an additional
attribute "h" storing its hop limit.
}
\description{
Efficiently constructs multiple path graphs from an input graph, each with a
different maximum hop limit. This is more efficient than creating path graphs
separately as it reuses computations.
}
\details{
The function computes path graphs for multiple hop limits efficiently by
building upon results from smaller hop values. This is particularly useful
for analyzing how network connectivity changes with increasing hop limits.
}
\examples{
\dontrun{
# Create a simple graph
graph <- list(
  c(2),    # Vertex 1 connected to 2
  c(1, 3), # Vertex 2 connected to 1 and 3
  c(2)     # Vertex 3 connected to 2
)
edge.lengths <- list(c(1.0), c(1.0, 2.0), c(2.0))

# Create path graphs for hop limits 1, 2, and 3
pgs <- create.path.graph.series(graph, edge.lengths, h.values = c(1, 2, 3))

# Access individual path graphs
pg.h2 <- pgs[[2]]  # Path graph with h=2
}

}
\seealso{
\code{\link{create.path.graph}}, \code{\link{compare.paths}}
}
