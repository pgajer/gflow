% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_utils.R
\name{graph.embedding}
\alias{graph.embedding}
\title{Create a 2D or 3D Embedding of a Graph}
\usage{
graph.embedding(
  adj.list,
  weights.list = NULL,
  invert.weights = TRUE,
  dim = 3,
  method = c("fr", "kk"),
  verbose = TRUE
)
}
\arguments{
\item{adj.list}{A list representing the adjacency list of the graph.}

\item{weights.list}{An optional list of numeric vectors representing the weights
of the edges. If provided, each element should correspond to the weights of
the edges in the same position in adj.list.}

\item{invert.weights}{Logical, if TRUE (default), inverts the weights (1/weight)
before applying them to the Fruchterman-Reingold algorithm. Has no effect on
Kamada-Kawai algorithm or when weights are not provided.}

\item{dim}{Integer, either 2 or 3, specifying the dimension of the embedding.
Default is 3.}

\item{method}{Character string specifying the layout algorithm to use.
Either "fr" for Fruchterman-Reingold or "kk" for Kamada-Kawai.
Default is "fr".}

\item{verbose}{Logical, if TRUE (default), print progress messages.}
}
\value{
A matrix representing the graph embedding, with each row
corresponding to a vertex and containing its coordinates.
}
\description{
This function takes an adjacency list representation of a graph and produces
a 2D or 3D embedding using either the Fruchterman-Reingold or
Kamada-Kawai algorithm. It can handle both weighted and unweighted graphs.
}
\details{
The function can handle both weighted and unweighted graphs. When weights are provided,
they are interpreted differently by the two layout algorithms:
\itemize{
\item Fruchterman-Reingold (FR): Weights are interpreted as spring constants. Higher
weights mean stronger springs, pulling vertices closer together. By default,
weights are inverted (1/weight) so that higher original weights result in
greater distances between vertices, matching the intuition of weights as distances.
\item Kamada-Kawai (KK): Weights are interpreted as distances. Higher weights mean
greater distances between vertices.
}

The \code{invert.weights} parameter allows control over this behavior for the FR algorithm.
When TRUE (default), it inverts the weights for FR to match the distance interpretation.
When FALSE, it uses the weights as-is, where higher weights pull vertices closer.
}
\examples{
# Unweighted graph
adj.list <- list(c(2, 3), c(1, 3), c(1, 2))
embedding <- graph.embedding(adj.list, dim = 2, method = "fr")

# Weighted graph
weights.list <- list(c(0.1, 0.2), c(0.1, 0.3), c(0.2, 0.3))
embedding_weighted <- graph.embedding(adj.list, weights.list, dim = 2, method = "kk")

}
