% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/random_sampling.R
\name{sample.from.empirical.distribution}
\alias{sample.from.empirical.distribution}
\title{Sample points from empirical distribution with optional linear approximation}
\usage{
sample.from.empirical.distribution(
  n,
  y,
  nbins = 100,
  use.linear.approximation = FALSE
)
}
\arguments{
\item{n}{Integer. Number of sample points to generate.}

\item{y}{Numeric vector. Raw data points from which to estimate distribution.}

\item{nbins}{Integer. Number of bins to use when estimating density.
More bins provide finer resolution but may introduce noise.}

\item{use.linear.approximation}{Logical. If TRUE, uses linear interpolation
between CDF points. If FALSE, uses step function approach.}
}
\value{
\if{html}{\out{<div class="sourceCode">}}\preformatted{ Numeric vector of length n containing samples from the distribution
         estimated from y.
}\if{html}{\out{</div>}}
}
\description{
This function implements the inverse transform sampling method to generate random
samples from an empirical distribution. The algorithm consists of the following steps:
}
\details{
\enumerate{
\item Density Estimation:
\itemize{
\item Constructs a histogram of the input data using nbins equally spaced bins
\item The histogram counts represent the empirical density
}
\item PDF Normalization:
\itemize{
\item Normalizes the density values to create a proper PDF that integrates to 1
\item For histogram with equal bin widths dx: pdf = counts / (sum(counts) * dx)
}
\item CDF Computation:
\itemize{
\item Computes the cumulative distribution function (CDF) from the normalized PDF
\item For histogram with equal bin widths: \code{cdf[i] = sum(pdf[1:i]) * dx}
\item The CDF is a step function by nature, jumping at bin midpoints
}
\item Inverse Transform Sampling:
\itemize{
\item Generates n uniform random numbers u ~ U(0,1)
\item For each u, finds x such that F(x) = u, where F is the CDF
\item Two methods available for finding x:
a) Step Function (use.linear.approximation=FALSE):
\itemize{
\item Returns the first x value where CDF \eqn{\ge} u
\item Preserves the discrete nature of the histogram
b) Linear Interpolation (use.linear.approximation=TRUE):
\item Linearly interpolates between surrounding x values
\item Smooths the distribution but may not perfectly represent histogram
}
}
}
}
\examples{
# Generate bimodal test data
y <- c(rnorm(1000, 0.3, 0.1), rnorm(1000, 0.7, 0.1))

# Sample using step function (default)
samples1 <- sample.from.empirical.distribution(1000, y)

# Sample using linear approximation
samples2 <- sample.from.empirical.distribution(1000, y, use.linear.approximation=TRUE)

# Compare distributions
par(mfrow=c(1,3))
hist(y, main="Original Data")
hist(samples1, main="Step Function Sampling")
hist(samples2, main="Linear Interpolation Sampling")

}
