% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geodesics.R
\name{estimate.geodesic.distances}
\alias{estimate.geodesic.distances}
\title{Estimate Geodesic Distances Between Points}
\usage{
estimate.geodesic.distances(points, k = 5, graph = NULL, method = "knn.graph")
}
\arguments{
\item{points}{A matrix or data frame where each row represents a point in the feature space.}

\item{k}{Positive integer. The number of nearest neighbors to use when constructing the graph.
When k=1 or method='mst', a minimal spanning tree is used instead. Default is 5.}

\item{graph}{An optional igraph object representing the graph structure of the points.
If provided, this graph will be used instead of constructing a new one.}

\item{method}{Character string specifying the method to use for constructing the graph.
Must be either "knn.graph" (default) or "mst" (minimal spanning tree).}
}
\value{
A distance matrix containing the estimated geodesic distances between all pairs of points.
The matrix has dimensions n x n where n is the number of points. Row and column names are
preserved from the input if present.
}
\description{
This function estimates the shortest path distances (geodesic distances) between points
in a given dataset. It can use either a k-nearest neighbors graph or a minimal spanning tree.
}
\details{
Geodesic distances represent the shortest path between points through a graph structure,
which can better capture the intrinsic geometry of data lying on a manifold compared to
Euclidean distances.

The function supports two methods for graph construction:
\itemize{
\item \strong{knn.graph}: Connects each point to its k nearest neighbors based on Euclidean distance
\item \strong{mst}: Creates a minimal spanning tree of all points
}
}
\note{
The k-NN graph construction creates a directed graph that is then treated as undirected.
This may result in some points having more than k connections if they appear in other
points' k-nearest neighbor lists.
}
\examples{
# Generate sample data on a Swiss roll manifold
n <- 100
t <- seq(0, 4*pi, length.out = n)
points <- cbind(
  x = t * cos(t),
  y = 10 * runif(n),
  z = t * sin(t)
)

# Estimate geodesic distances using k-NN graph
geo_dist_knn <- estimate.geodesic.distances(points, k = 5)

# Estimate geodesic distances using MST
geo_dist_mst <- estimate.geodesic.distances(points, method = "mst")

# Compare with Euclidean distances
euc_dist <- as.matrix(dist(points))

# Geodesic distances are typically larger than Euclidean for manifold data
mean(geo_dist_knn > euc_dist, na.rm = TRUE)

}
