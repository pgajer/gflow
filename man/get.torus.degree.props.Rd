% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_utils.R
\name{get.torus.degree.props}
\alias{get.torus.degree.props}
\title{Calculate Degree Distribution Properties for Random Points on a Torus}
\usage{
get.torus.degree.props(n.pts = 1000, n.sims = 100, k = 10, dim = 1)
}
\arguments{
\item{n.pts}{numeric; Number of points to generate on the torus for each simulation.}

\item{n.sims}{numeric; Number of simulations to run.}

\item{k}{numeric; Number of nearest neighbors to use in constructing the graph.}

\item{dim}{numeric; Dimension of the torus (e.g., 1 for circle, 2 for 2-torus).}
}
\value{
A list containing:
\describe{
\item{mean.props}{Vector of mean proportions for each degree}
\item{ci.lower}{Vector of lower 95\% confidence interval bounds}
\item{ci.upper}{Vector of upper 95\% confidence interval bounds}
\item{degrees}{Vector of degree values corresponding to the proportions}
}
}
\description{
Simulates points uniformly on a torus and computes the degree distribution
properties of their k-nearest neighbor graph. For each simulation, points are
generated, a k-NN graph is constructed, and the proportion of vertices with
each degree is calculated. The function returns mean proportions and confidence
intervals across all simulations.
}
\details{
The function generates uniform random points on a torus using \code{\link{runif.torus}}
and constructs k-nearest neighbor graphs using \code{create.single.iknn.graph}. For each
simulation, it computes the proportion of vertices with each degree. The final
results include means and 95\% confidence intervals for these proportions across
all simulations.

The confidence intervals are computed using the normal approximation:
\eqn{\text{mean} \pm 1.96 \times (\text{standard deviation} / \sqrt{n.sims})}
}
\examples{
\dontrun{
# Calculate degree distribution properties for 1000 points on a circle
circle_props <- get.torus.degree.props(n.pts = 1000, n.sims = 100, k = 10, dim = 1)

# Calculate for points on a 2-torus
torus_props <- get.torus.degree.props(n.pts = 1000, n.sims = 100, k = 10, dim = 2)
}
}
