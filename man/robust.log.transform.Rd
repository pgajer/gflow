% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stats_utils.R
\name{robust.log.transform}
\alias{robust.log.transform}
\title{Returns robust log transform of a non-negative vector}
\usage{
robust.log.transform(x)
}
\arguments{
\item{x}{A numeric vector of non-negative numbers.}
}
\value{
A numeric vector of the same length as x, where positive values are log-transformed
and normalized by the mean of log-transformed values, and zero values remain zero.
}
\description{
This function applies a log transformation to positive values and normalizes them by their mean,
while keeping zero values as zero. This creates a scale-invariant transformation that preserves
the relative differences between positive values.
}
\details{
The transformation process:
\enumerate{
\item Positive values are log-transformed: \code{log(x[i])} for \code{x[i] > 0}
\item The mean of log-transformed values is calculated: \code{M = mean(log(x[x > 0]))}
\item Log-transformed values are divided by M for normalization
\item Zero values remain unchanged as 0
}
}
\note{
This function assumes all input values are non-negative. Negative values will cause
unexpected behavior as they are not checked.
}
\examples{
# Example 1: Basic usage
x <- c(0, 1, 10, 100, 1000)
robust.log.transform(x)

# Example 2: Scale invariance property
x1 <- c(0, 1, 2, 5, 10)
x2 <- c(0, 10, 20, 50, 100)  # x1 * 10
# The relative differences are preserved
robust.log.transform(x1)
robust.log.transform(x2)
}
