% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iknn_graphs.R
\name{create.iknn.graphs}
\alias{create.iknn.graphs}
\title{Create Intersection k-Nearest Neighbor Graphs with Dual Pruning Methods}
\usage{
create.iknn.graphs(
  X,
  kmin,
  kmax,
  max.path.edge.ratio.deviation.thld = 0.1,
  path.edge.ratio.percentile = 0.5,
  compute.full = TRUE,
  pca.dim = 100,
  variance.explained = 0.99,
  n.cores = NULL,
  verbose = FALSE
)
}
\arguments{
\item{X}{numeric matrix where rows represent observations and columns represent features.
Cannot be a data frame.}

\item{kmin}{integer, minimum number of nearest neighbors (>= 1)}

\item{kmax}{integer, maximum number of nearest neighbors (> kmin)}

\item{max.path.edge.ratio.deviation.thld}{numeric, threshold for geometric pruning based on path-to-edge ratio.
If > 0, removes edges where the ratio of alternative path length to direct edge length
minus 1.0 is less than this value. If <= 0, geometric pruning uses a default method.
Must be in the interval [0, 0.2).}

\item{path.edge.ratio.percentile}{numeric in \eqn{[0,1]}, percentile threshold for edge lengths
considered in geometric pruning. Only edges with length greater than this
percentile are evaluated for path-ratio pruning.}

\item{compute.full}{logical, if TRUE returns all pruned graphs, if FALSE returns only
edge statistics}

\item{pca.dim}{Maximum number of principal components to use if dimensionality reduction
is applied (default: 100). Set to NULL to skip dimensionality reduction.}

\item{variance.explained}{Percentage of variance to be explained by the principal components
(default: 0.99). If this threshold can be met with fewer components than pca.dim,
the smaller number will be used. Set to NULL to use exactly pca.dim components.}

\item{n.cores}{The number of cores to use. Set to NULL to use maximal number of cores.}

\item{verbose}{Logical. If TRUE, print progress messages and timing information.
Default is FALSE.}
}
\value{
A list of class "iknn_graphs" containing:
\describe{
\item{k_statistics}{Matrix with columns: k, number of edges in original graph,
number of edges after geometric pruning, number of removed edges,
edge reduction ratio, number of edges after intersection-size pruning,
additional edges removed in intersection-size pruning,
intersection-size edge reduction ratio}
\item{geom_pruned_graphs}{If compute_full=TRUE, list of geometrically pruned graphs for each k.
Each graph contains adjacency lists and edge weights.
If compute_full=FALSE, NULL}
\item{isize_pruned_graphs}{If compute_full=TRUE, list of intersection-size pruned graphs for each k.
Each graph contains adjacency lists and edge weights.
If compute_full=FALSE, NULL}
\item{edge_pruning_stats}{List of matrices, one for each k value, containing edge pruning statistics
including edge lengths and path-to-edge length ratios}
}
}
\description{
Computes a sequence of intersection-weighted k-nearest neighbor graphs for k in \eqn{[\text{kmin, \text{kmax}]}}
with two different edge pruning methods: geometric pruning and intersection-size pruning.
The function can optionally perform dimensionality reduction via PCA before graph construction.
}
\details{
The function applies two different pruning methods to construct efficient graph representations:
\enumerate{
\item Geometric pruning: Based on path-to-edge ratios
\itemize{
\item Removes edges where alternative paths exist with similar or better geometric properties
\item Controlled by max.path.edge.ratio.deviation.thld and path.edge.ratio.percentile parameters
}
\item Intersection-size pruning: Based on intersection sizes of k-NN sets
\itemize{
\item Removes edges where alternative paths exist with all edges having larger intersection sizes
\item Uses a fixed maximum alternative path length of 2
}
}

Note: The current implementation does not compute edge birth/death times. The birth_death_matrix
and double_birth_death_matrix fields may be present but will be empty.
}
\examples{
\dontrun{
# Generate sample data
X <- matrix(rnorm(100 * 5), 100, 5)

# Basic usage
result <- create.iknn.graphs(
  X, kmin = 3, kmax = 10,
  compute.full = FALSE
)

# With custom pruning parameters
result <- create.iknn.graphs(
  X, kmin = 3, kmax = 10,
  max.path.edge.ratio.deviation.thld = 0.1,
  path.edge.ratio.percentile = 0.5,
  compute.full = TRUE,
  n.cores = 1,
  verbose = TRUE
)

# View statistics for each k
print(result$k_statistics)
}

}
