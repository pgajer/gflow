% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iknn_graphs.R
\name{create.iknn.graphs}
\alias{create.iknn.graphs}
\title{Create Intersection k-Nearest Neighbor Graphs with Multi-Stage Pruning}
\usage{
create.iknn.graphs(
  X,
  kmin,
  kmax,
  pruning.thld = 0.1,
  outlier.long.edge.thld = 0.1,
  max.path.edge.ratio.deviation.thld = 0.1,
  path.edge.ratio.percentile = 0.5,
  compute.full = TRUE,
  pca.dim = 100,
  variance.explained = 0.99,
  verbose = FALSE
)
}
\arguments{
\item{X}{numeric matrix where rows represent observations and columns represent features.
Cannot be a data frame.}

\item{kmin}{integer, minimum number of nearest neighbors (>= 1)}

\item{kmax}{integer, maximum number of nearest neighbors (> kmin)}

\item{pruning.thld}{numeric in (0,0.9), controlling intensity of the first-stage geometric edge pruning.
Edge weight relative deviation is computed as rel_dev = (w_ij + w_jk) / w_ik - 1.0.
Edges with rel_dev < pruning.thld are removed.}

\item{outlier.long.edge.thld}{numeric in \link{0,1}, threshold percentile for second-stage pruning of long edges.
Default is 0.1, which removes the top 10\% longest edges while preserving connectivity.}

\item{max.path.edge.ratio.deviation.thld}{numeric, threshold for third-stage pruning based on path-to-edge ratio.
If > 0, removes edges where the ratio of alternative path length to direct edge length
is less than or equal to this value. If <= 0, third-stage pruning is skipped.}

\item{path.edge.ratio.percentile}{numeric in \link{0,1}, percentile threshold for edge lengths
considered in third-stage pruning. Only edges with length greater than this
percentile are evaluated for path-ratio pruning.}

\item{compute.full}{logical, if TRUE returns all pruned graphs, if FALSE returns only
edge statistics and birth/death times}

\item{pca.dim}{Maximum number of principal components to use if dimensionality reduction
is applied (default: 100). Set to NULL to skip dimensionality reduction.}

\item{variance.explained}{Percentage of variance to be explained by the principal components
(default: 0.99). If this threshold can be met with fewer components than pca.dim,
the smaller number will be used. Set to NULL to use exactly pca.dim components.}

\item{verbose}{Logical. If TRUE, print progress messages and timing information.
Default is FALSE.}
}
\value{
A list containing:
\describe{
\item{birth_death_matrix}{Matrix with columns: start vertex (1-based), end vertex (1-based),
birth time, and death time. For each edge, birth time is k when edge first appears,
death time is (last k where edge exists) + 1}
\item{k_statistics}{Matrix with columns: k, number of edges in original graph,
number of edges after first-stage pruning, number of removed edges,
edge reduction ratio, number of edges after second-stage pruning,
additional edges removed in second-stage, second-stage edge reduction ratio}
\item{pruned_graphs}{If compute_full=TRUE, list of first-stage pruned graphs for each k.
Each graph contains adjacency lists and distances.
If compute_full=FALSE, NULL}
\item{double_birth_death_matrix}{Similar to birth_death_matrix but for the multi-stage
pruned graphs}
\item{double_pruned_graphs}{If compute_full=TRUE, list of multi-stage pruned graphs for each k.
If compute_full=FALSE, NULL}
\item{edge_pruning_stats}{List of matrices, one for each k value, containing edge pruning statistics
including edge lengths and path-to-edge length ratios}
}
}
\description{
Computes a sequence of intersection-weighted k-nearest neighbor graphs for k in \link{kmin, kmax}
with multi-stage edge pruning to produce efficient graph representations. The function
tracks birth and death times of edges across different k values and can optionally
perform dimensionality reduction via PCA before graph construction.
}
\details{
The function applies a multi-stage pruning process to construct efficient graph representations:
\enumerate{
\item First stage: Geometric pruning based on relative deviation threshold
\itemize{
\item Removes edges where indirect paths through common neighbors provide a good alternative
\item Controlled by pruning.thld parameter
}
\item Second stage: Long-edge pruning
\itemize{
\item Removes edges longer than the specified percentile threshold if they can be replaced
by alternate paths
\item Controlled by outlier.long.edge.thld parameter
}
\item Third stage (optional): Path-ratio pruning
\itemize{
\item Removes edges where the ratio of alternative path length to direct edge length
is below the specified threshold
\item Controlled by max.path.edge.ratio.thld and path.edge.ratio.percentile parameters
}
}

For each edge, birth and death times are tracked:
\itemize{
\item Birth time b(e) is the smallest k where edge e appears in the pruned graph
\item Death time d(e) is one plus the largest k where edge e appears in the pruned graph
\item If edge persists through kmax, its death time will be kmax + 1
\item The interval [b(e), d(e)) contains exactly the k values where edge e exists
}
}
\examples{
\dontrun{
# Generate sample data
X <- matrix(rnorm(100 * 5), 100, 5)

# Basic usage
result <- create.iknn.graphs(
  X, kmin = 3, kmax = 10,
  compute.full = FALSE
)

# With additional pruning options
result <- create.iknn.graphs(
  X, kmin = 3, kmax = 10,
  pruning.thld = 0.1,
  outlier.long.edge.thld = 0.2,
  max.path.edge.ratio.deviation.thld = 0.2,
  path.edge.ratio.percentile = 0.5,
  compute.full = TRUE,
  verbose = TRUE
)

# Access birth-death statistics
head(result$birth.death.matrix)

# View statistics for each k
print(result$k.statistics)
}

}
