% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wasserstein_dist.R
\name{wasserstein1d.test}
\alias{wasserstein1d.test}
\title{Performs Permutation Test for the Wasserstein Distance Between Two 1D Samples}
\usage{
wasserstein1d.test(x, y, n.perms = 10000, n.cores = 7)
}
\arguments{
\item{x}{A numeric vector representing the first 1D sample.}

\item{y}{A numeric vector representing the second 1D sample.}

\item{n.perms}{An integer specifying the number of permutations to use for the
permutation test. Default value is 10,000.}

\item{n.cores}{An integer specifying the number of cores to use for parallel
computation. If \code{n.cores} is greater than 1, the null Wasserstein distances are
computed in parallel. If \code{n.cores} is 1 (default), the computation is done serially.}
}
\value{
A list containing:
\itemize{
\item \code{wasserstein1d}: The Wasserstein distance between \code{x} and \code{y}.
\item \code{null.wasserstein1d}: A numeric vector of Wasserstein distances between
permuted \code{x} and \code{y}, obtained from \code{n.perms} permutations.
\item \code{p.value}: The p-value of the permutation test, representing the proportion
of permuted Wasserstein distances that are greater than or equal to the observed distance.
}
}
\description{
Performs a permutation test to assess the significance of the Wasserstein distance
between two 1D samples. The test determines if the observed Wasserstein distance
is significantly different from the distances obtained by permuting the samples,
under the null hypothesis that the samples come from the same distribution.
The function supports parallel computation for faster processing.
}
\details{
The function computes the actual Wasserstein distance between the two provided
samples, then performs \code{n.perms} permutations of the concatenated samples and computes
the Wasserstein distance for each permutation. The p-value is computed as the proportion
of permuted distances that are at least as large as the actual distance.
}
\examples{
## Two samples from the same distribution
x <- rnorm(100); y <- rnorm(100)
res <- wasserstein1d.test(x, y, n.perms = 1000, n.cores = 1)
str(res)

## Two samples from different distributions
x <- rnorm(100)
y <- rnorm(100, mean = 2)
## Perform the permutation test with 1000 permutations, serially
res <- wasserstein1d.test(x, y, n.perms = 1000, n.cores = 1)
str(res)
## Perform the permutation test with 1000 permutations, using 2 cores
res <- wasserstein1d.test(x, y, n.perms = 1000, n.cores = 2)
str(res)
}
\seealso{
\code{\link[transport]{wasserstein1d}} for computing the Wasserstein distance between two 1D samples.
}
