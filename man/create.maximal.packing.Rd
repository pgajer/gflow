% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_maximal_packing.R
\name{create.maximal.packing}
\alias{create.maximal.packing}
\title{Create a Maximal Packing of Vertices in a Graph}
\usage{
create.maximal.packing(
  adj.list,
  weight.list,
  grid.size,
  max.iterations = 20,
  precision = 0.1
)
}
\arguments{
\item{adj.list}{A list where each element is a vector of adjacent vertex
indices (1-based) for the corresponding vertex. Must represent an
undirected graph.}

\item{weight.list}{A list where each element is a vector of edge weights
corresponding to the adjacencies in \code{adj.list}. All weights
must be positive.}

\item{grid.size}{A positive integer (>= 2) specifying the approximate
separation distance between vertices in the packing.}

\item{max.iterations}{Maximum number of iterations for the algorithm to
converge. Default is 20.}

\item{precision}{Precision threshold for convergence of the algorithm.
Must be between 0 and 0.5. Default is 0.1.}
}
\value{
A list with class "maximal_packing" containing five components:
\item{adj_list}{A list of adjacency vectors for each vertex in the
resulting grid graph}
\item{weight_list}{A list of weight vectors corresponding to each
adjacency}
\item{grid_vertices}{An integer vector of vertex indices that form
the maximal packing}
\item{graph_diameter}{A numeric value representing the maximum shortest
path distance between any two vertices in the graph}
\item{max_packing_radius}{A numeric value representing the optimal radius
used for the final packing, which is the minimum guaranteed distance
between any two vertices in the packing}
}
\description{
Creates a maximal packing of vertices based on a specified grid
size. The algorithm places vertices in the graph using a separation distance
that produces a vertex set packing of size approximately equal to the
given grid size. A vertex packing is a set of vertices where each pair
is separated by at least a specified distance.
}
\details{
The function computes a maximal packing by iteratively selecting
vertices that are approximately \code{grid.size} apart from each other.
The process starts from one of the graph's diameter endpoints (determined
automatically) and continues until no more vertices can be added to the
packing without violating the distance constraint.

\if{html}{\out{<div class="sourceCode">}}\preformatted{The returned \code{graph_diameter} represents the longest shortest path
in the graph, which provides insight into the graph's overall structure
and extent.

The \code{max_packing_radius} value indicates the minimum distance that
separates any two vertices in the packing. This value is determined
through binary search to achieve a packing of approximately the
requested size.

The function validates input parameters and ensures that the graph
structure is properly specified before computing the packing. The graph
must be undirected (symmetric adjacency) and connected.
}\if{html}{\out{</div>}}
}
\examples{
\dontrun{
# Create a simple triangle graph
adj.list <- list(c(2, 3), c(1, 3), c(1, 2))
weight.list <- list(c(1, 1), c(1, 1), c(1, 1))

# Create grid graph with grid size 2
result <- create.maximal.packing(adj.list, weight.list, grid.size = 2)

# View the vertices in the maximal packing
print(result$grid_vertices)

# Access the graph diameter and packing radius
cat("Graph diameter:", result$graph_diameter, "\n")
cat("Packing radius:", result$max_packing_radius, "\n")
}

}
\seealso{
\code{\link{validate.maximal.packing}},
\code{\link{verify.maximal.packing}}
}
