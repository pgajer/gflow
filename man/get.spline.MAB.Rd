% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bias_utils.R
\name{get.spline.MAB}
\alias{get.spline.MAB}
\title{Estimate Mean Absolute Bias (MAB) of Spline Model}
\usage{
get.spline.MAB(x, y, xt, yt, folds, y.binary = FALSE)
}
\arguments{
\item{x}{A numeric vector representing the predictor variable for the training set.}

\item{y}{A numeric vector representing the response variable for the training set.}

\item{xt}{A numeric vector representing the predictor variable for the test set.}

\item{yt}{A numeric vector representing the true response values for the test set.}

\item{folds}{A list of indices for cross-validation folds.}

\item{y.binary}{Logical indicating if y is a binary variable (default = FALSE).}
}
\value{
A list containing:
\describe{
\item{MAB}{Mean Absolute Bias calculated on the test set}
\item{RMSE}{Root Mean Square Error}
\item{predictions}{Predictions made by the spline model on the test set}
\item{residuals}{Absolute residuals}
\item{parameters}{List containing the optimal degrees of freedom}
}
}
\description{
Fits a spline model to a given dataset and evaluates its performance using
cross-validation. The function supports both continuous and binary outcomes,
using smooth splines for continuous data and B-splines with GLM for binary data.
The optimal degrees of freedom is selected based on minimizing the Mean Absolute Error.
}
\details{
For continuous outcomes (\code{y.binary = FALSE}), the function uses \code{smooth.spline}
to fit smoothing splines with different degrees of freedom (3, 4, 5) and selects the
optimal value via cross-validation.

For binary outcomes (\code{y.binary = TRUE}), the function uses generalized linear models
with B-spline basis functions via \code{glm} and \code{bs}. The degrees of freedom
parameter controls the number of basis functions.
}
\examples{
\dontrun{
# Example with continuous outcome
set.seed(123)
x <- seq(0, 2*pi, length.out = 100)
y <- sin(x) + rnorm(100, sd = 0.2)
xt <- seq(0, 2*pi, length.out = 50)
yt <- sin(xt)

# Create cross-validation folds
folds <- create.folds(y, k = 5, list = TRUE, returnTrain = TRUE)

# Fit spline model
result <- get.spline.MAB(x, y, xt, yt, folds, y.binary = FALSE)
print(result$MAB)

# Example with binary outcome
y.binary <- rbinom(100, 1, plogis(sin(x)))
yt.binary <- plogis(sin(xt))
result.binary <- get.spline.MAB(x, y.binary, xt, yt.binary, folds, y.binary = TRUE)
print(result.binary$MAB)
}

}
