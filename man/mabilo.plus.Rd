% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mabilo_plus.R
\name{mabilo.plus}
\alias{mabilo.plus}
\title{Model-Averaged Locally Weighted Scatterplot Smoothing Plus (MABILO Plus)}
\usage{
mabilo.plus(
  x,
  y,
  y.true = NULL,
  k.min = max(3, as.integer(0.05 * length(x))),
  k.max = as.integer((length(x) - 2)/4),
  model.averaging.strategy = "kernel.and.error.weights",
  error.filtering.strategy = "combined.percentile",
  distance.kernel = 7L,
  model.kernel = 7L,
  dist.normalization.factor = 1,
  epsilon = 1e-10,
  verbose = TRUE
)
}
\arguments{
\item{x}{Numeric vector of x coordinates.}

\item{y}{Numeric vector of y coordinates (response values).}

\item{y.true}{Optional numeric vector of true y values for error calculation.}

\item{k.min}{Minimum number of neighbors (positive integer). Default is 5\% of data points or 3, whichever is larger.}

\item{k.max}{Maximum number of neighbors (positive integer > k.min). Default corresponds to 2k+1 = n/2.}

\item{model.averaging.strategy}{Character string specifying the model averaging strategy.
Must be one of: "kernel.weights.only", "error.weights.only", "kernel.and.error.weights".
Default is "kernel.and.error.weights".}

\item{error.filtering.strategy}{Character string specifying the error filtering strategy.
Must be one of: "global.percentile", "local.percentile", "combined.percentile", "best.k.models".
Default is "combined.percentile".}

\item{distance.kernel}{Integer specifying the kernel type for distance weighting (1-10).
Default is 7L.}

\item{model.kernel}{Integer specifying the kernel type for model weighting (1-10).
Default is 7L.}

\item{dist.normalization.factor}{Positive numeric value for distance normalization.
Default is 1.0.}

\item{epsilon}{Small positive number to prevent division by zero. Default is 1e-10.}

\item{verbose}{Logical indicating whether to print progress information. Default is TRUE.}
}
\value{
A list of class "mabilo_plus" containing:
\item{\code{k_values}}{Vector of k values tested}
\item{\code{opt_sm_k}}{Optimal k value for simple mean predictions}
\item{\code{opt_ma_k}}{Optimal k value for model averaged predictions}
\item{\code{opt_sm_k_idx}}{Index of optimal k for simple mean}
\item{\code{opt_ma_k_idx}}{Index of optimal k for model averaging}
\item{\code{k_mean_sm_errors}}{Mean errors for each k value (simple mean)}
\item{\code{k_mean_ma_errors}}{Mean errors for each k value (model averaged)}
\item{\code{k_mean_true_errors}}{Mean true errors for each k (if y.true provided)}
\item{\code{sm_predictions}}{Simple mean predictions}
\item{\code{ma_predictions}}{Model averaged predictions}
\item{\code{sm_errors}}{Leave-one-out CV errors (simple mean)}
\item{\code{ma_errors}}{Leave-one-out CV errors (model averaged)}
\item{\code{k_predictions}}{Matrix of predictions for each k value}
\item{\code{x_sorted}}{Sorted x values}
\item{\code{y_sorted}}{Sorted y values}
\item{\code{y_true_sorted}}{Sorted true y values (if provided)}
\item{\code{k_min}}{Minimum k value used}
\item{\code{k_max}}{Maximum k value used}
}
\description{
Performs smoothing using MABILO Plus, which extends the original MABILO algorithm
by incorporating flexible model averaging strategies and error filtering approaches
without bootstrap resampling.
}
\examples{
# Basic usage
x <- seq(0, 10, length.out = 100)
y <- sin(x) + rnorm(100, 0, 0.1)
fit <- mabilo.plus(x, y)

# With custom parameters
fit2 <- mabilo.plus(x, y, k.min = 5, k.max = 20,
                    model.averaging.strategy = "kernel.weights.only")

# Plot the results
plot(x, y)
lines(fit$x_sorted, fit$ma_predictions, col = "red", lwd = 2)

}
