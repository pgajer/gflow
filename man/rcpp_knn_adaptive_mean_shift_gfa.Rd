% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{rcpp_knn_adaptive_mean_shift_gfa}
\alias{rcpp_knn_adaptive_mean_shift_gfa}
\title{kNN-Adaptive Mean Shift with Gradient Field Averaging (C++ engine)}
\usage{
rcpp_knn_adaptive_mean_shift_gfa(
  X,
  k,
  density_k,
  n_steps,
  step_size,
  ikernel = 1L,
  dist_normalization_factor = 1.01,
  average_direction_only = FALSE
)
}
\arguments{
\item{X}{numeric matrix (n x d).}

\item{k}{integer, k-NN for gradient estimation (excl. self).}

\item{density_k}{integer, k-NN for density estimation (excl. self).}

\item{n_steps}{integer, number of iterations.}

\item{step_size}{positive numeric step size (constant over iterations).}

\item{ikernel}{Type of kernel function to use (default: 1 - Epanechnikov).
Available kernels:
- 0-Constant,
- 1-Epanechnikov,
- 2-Triangular,
- 3-TrExponential,
- 4-Laplace,
- 5-Normal,
- 6-Biweight,
- 7-Tricube,
- 8-Cosine
- 9-Hyperbolic}

\item{dist_normalization_factor}{numeric > 0.}

\item{average_direction_only}{logical; if TRUE, average directions only.}
}
\value{
list with \code{X_traj} (list of n x d matrices over iterations)
and \code{median_kdistances} (numeric).
}
\description{
Low-level Rcpp wrapper. Prefer calling the R wrapper
\code{knn_adaptive_mean_shift_gfa()} for a friendlier interface.
}
