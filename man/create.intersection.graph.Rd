% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intersection_graphs.R
\name{create.intersection.graph}
\alias{create.intersection.graph}
\title{Create an Intersection Graph}
\usage{
create.intersection.graph(adj.list, p.thld, n.itrs = 1)
}
\arguments{
\item{adj.list}{A graph adjacency list of integer vectors or a matrix of
integers. Each vector/row represents the neighbors of a node in the input
graph. If using vectors, they should be sorted in ascending order.}

\item{p.thld}{A numeric value between 0 and 1. Determines the threshold for
considering an intersection significant. For nodes i and j, the threshold
is calculated as: \code{thld = p.thld * min(length(adj.list[[i]]),
    length(adj.list[[j]]))}}

\item{n.itrs}{Integer. Number of iterations to perform (default is 1).}
}
\value{
A list of integer vectors representing the intersection graph. Each vector
contains the indices of neighbors for the corresponding node in the new graph.
}
\description{
Constructs an intersection graph from an input graph based on neighborhood intersections.
In the output graph, an edge exists between two nodes if their neighborhoods in the input
graph have a significant intersection.
}
\details{
The function performs the following steps:
\enumerate{
\item Validates input parameters.
\item Converts input to 0-based indexing for C++ processing.
\item Calls the C++ implementation to create the intersection graph.
\item Returns the result as a list of integer vectors.
}

For multiple iterations (n.itrs > 1), each iteration uses the result of the previous
iteration as its input graph.
}
\examples{
adj.list <- list(c(1,2), c(0,2,3), c(0,1), c(1))
result <- create.intersection.graph(adj.list, 0.5)
print(result)

}
