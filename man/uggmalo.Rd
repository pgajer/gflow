% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uggmalo.R
\name{uggmalo}
\alias{uggmalo}
\title{Uniform Grid Graph Model-Averaged Local Linear Regression (UGGMALO)}
\usage{
uggmalo(
  adj.list,
  weight.list,
  y,
  best.models.coverage.factor = 0.9,
  min.bw.factor = 0.05,
  max.bw.factor = 0.5,
  n.bws = 50L,
  grid.size = 100L,
  start.vertex = 1L,
  snap.tolerance = 0.1,
  dist.normalization.factor = 1.01,
  min.path.size = 5L,
  diff.threshold = 5L,
  kernel.type = 7L,
  fit.quadratic = FALSE,
  tolerance = 1e-08,
  n.bb = 0L,
  p = 0.95,
  n.perms = 0L,
  verbose = FALSE
)
}
\arguments{
\item{adj.list}{A list of integer vectors representing the adjacency list
of the graph. Each element i contains the indices of vertices adjacent
to vertex i (1-based indexing).}

\item{weight.list}{A list of numeric vectors representing the weights of
the edges. Must have the same structure as \code{adj.list}.}

\item{y}{A numeric vector of observations at each vertex. Length must
match the number of vertices.}

\item{best.models.coverage.factor}{Numeric scalar between 0.5 and 1.0
controlling model coverage. Default: 0.9}

\item{min.bw.factor}{Numeric scalar. Minimum bandwidth factor relative
to graph diameter. Must be positive. Default: 0.05}

\item{max.bw.factor}{Numeric scalar. Maximum bandwidth factor relative
to graph diameter. Must be greater than \code{min.bw.factor}.
Default: 0.5}

\item{n.bws}{Integer. Number of bandwidths to test between
\code{min.bw.factor} and \code{max.bw.factor}. Must be positive.
Default: 50}

\item{grid.size}{Integer. Size of the evaluation grid for predictions.
Must be positive. Default: 100}

\item{start.vertex}{Integer. Index of the starting vertex (1-based).
Must be between 1 and the number of vertices. Default: 1}

\item{snap.tolerance}{Numeric scalar. Tolerance for snapping distances
to grid points. Must be positive. Default: 0.1}

\item{dist.normalization.factor}{Numeric scalar. Factor for normalizing
distances. Must be greater than 1. Default: 1.01}

\item{min.path.size}{Integer. Minimum path size for distance calculations.
Must be at least 5. Default: 5}

\item{diff.threshold}{Integer. Threshold for difference in path lengths.
Must be at least 5. Default: 5}

\item{kernel.type}{Integer between 0 and 7. Type of kernel to use:
\itemize{
\item 0: Uniform kernel
\item 1: Triangular kernel
\item 2: Epanechnikov kernel
\item 3: Quartic kernel
\item 4: Triweight kernel
\item 5: Tricube kernel
\item 6: Gaussian kernel
\item 7: Cosine kernel
}
Default: 7}

\item{fit.quadratic}{Logical. Whether to fit quadratic terms in the
local models. Default: FALSE}

\item{tolerance}{Numeric scalar. Convergence tolerance for optimization.
Must be positive. Default: 1e-8}

\item{n.bb}{Integer. Number of bag bootstrap iterations. Must be
non-negative. Default: 0}

\item{p}{Numeric scalar between 0 and 1. Probability parameter for
bootstrap. Default: 0.95}

\item{n.perms}{Integer. Number of permutations for uncertainty
estimation. Must be non-negative. Default: 0}

\item{verbose}{Logical. Whether to print progress messages.
Default: FALSE}
}
\value{
A list of class "uggmalo" containing:
\describe{
\item{candidate_bws}{Numeric vector of candidate bandwidths tested}
\item{bw_predictions}{Matrix of predictions for each bandwidth (vertices x bandwidths)}
\item{mean_errors}{Numeric vector of mean cross-validation errors
for each bandwidth}
\item{opt_bw_idx}{Integer. Index of the optimal bandwidth (1-based)}
\item{predictions}{Numeric vector of predictions using the optimal
bandwidth}
\item{graph_diameter}{Numeric. Diameter of the graph}
}
}
\description{
\strong{Note: This is an experimental function and may produce errors under
certain conditions. Use with caution and please report issues.}

Implements the Uniform Grid Graph Model-Averaged Local linear regression
(UGGMALO) algorithm for estimating conditional expectations of functions
defined over vertices of a graph using local path linear models with
model averaging.

The algorithm performs the following main steps:
\enumerate{
\item Computes graph diameter and determines bandwidth range
\item Creates a uniform grid representation of the input graph
\item For each candidate bandwidth:
\itemize{
\item Processes paths through grid vertices
\item Fits local logistic models to path data
\item Computes weighted predictions and errors
}
\item Determines optimal bandwidth based on cross-validation errors
}

The algorithm uses weighted logistic regression on paths through the graph
to create local models, which are then combined using weighted averaging.
Model evaluation is performed using leave-one-out cross-validation with
Brier score errors.
}
\examples{
\dontrun{
# Create a simple chain graph
set.seed(123)  # For reproducibility
n.vertices <- 20
adj.list <- lapply(1:n.vertices, function(i) {
  # Simple chain graph
  if (i == 1) c(2L)
  else if (i == n.vertices) c(i - 1L)
  else c(i - 1L, i + 1L)
})

dist.list <- lapply(1:n.vertices, function(i) {
  if (i == 1) c(1.0)
  else if (i == n.vertices) c(1.0)
  else c(1.0, 1.0)
})

# Create parabolic signal with noise
x <- seq(-1, 1, length.out = n.vertices)
true.signal <- 3 * x^2 - 2 * x + 1  # Parabola
noise <- rnorm(n.vertices, mean = 0, sd = 0.3)
y <- true.signal + noise

# Run estimation with default parameters
result <- uggmalo(adj.list, dist.list, y)

# Compare true vs estimated values
plot(1:n.vertices, y, pch = 19, col = "gray50",
     xlab = "Vertex", ylab = "Value",
     main = "UGGMALO: True vs Estimated")
lines(1:n.vertices, true.signal, col = "blue", lwd = 2)
lines(1:n.vertices, result$predictions, col = "red", lwd = 2)
legend("topright", c("Observations", "True signal", "UGGMALO estimate"),
       col = c("gray50", "blue", "red"),
       pch = c(19, NA, NA), lty = c(NA, 1, 1), lwd = 2)

# Run with custom parameters for comparison
result2 <- uggmalo(adj.list, dist.list, y,
                   min.bw.factor = 0.1,
                   max.bw.factor = 0.8,
                   n.bws = 30,
                   verbose = TRUE)
}

}
