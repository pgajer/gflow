% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geodesics.R
\name{geodesic.knnx}
\alias{geodesic.knnx}
\title{Estimates geodesic (shortest path) nearest neighbors of X.grid points in X.
That is for each point of X.grid the k-NN's within X are returned.}
\usage{
geodesic.knnx(X, X.grid, k, method = "knn.graph", K = 5)
}
\arguments{
\item{X}{A numeric matrix.}

\item{X.grid}{A grid associated with X.}

\item{k}{The number of nearest neighbors to be returned.}

\item{method}{A method for building a graph distances within which are going
to give shortest path distance estimates. This parameter is not used now,
but in the nearest future I am envisioning other methods of constructing
the graph.}

\item{K}{The number of neighbors in knn.graph() to build a knn graph. When
k=1, the knn graph is the minimal spanning tree.}
}
\value{
A list containing:
\item{V}{Combined vertex matrix containing both X.grid and X points.}
\item{E}{Edge matrix defining the graph structure.}
\item{nn.index}{An nrow(X.grid) x k matrix where element \code{[i,j]} contains the
index (in X) of the j-th geodesic nearest neighbor of grid point i.}
\item{nn.dist}{An nrow(X.grid) x k matrix where element \code{[i,j]} contains the
geodesic distance from grid point i to its j-th nearest neighbor in X.}
}
\description{
Estimates geodesic (shortest path) nearest neighbors of X.grid points in X.
That is for each point of X.grid the k-NN's within X are returned.
}
\details{
This function finds k-nearest neighbors from dataset X for each point in X.grid
based on geodesic distances. It's particularly useful for interpolation or
extrapolation tasks where you want to find the closest data points to query points
on a manifold.

The algorithm works by:
\enumerate{
\item Creating a combined graph that includes both X.grid and X points
\item Establishing edges within X.grid based on grid structure
\item Connecting X points to their nearest grid points
\item Computing geodesic distances through this combined graph
\item Extracting k-nearest neighbors from X for each X.grid point
}
}
\note{
The parameter K is automatically set to 2^ncol(X) to ensure adequate connectivity
between the data points and the grid. The grid connectivity is based on the
dimensionality of the data (2 neighbors in 1D, 4 in 2D, 6 in 3D, etc.).
}
\examples{
\dontrun{
# Create sample data
X <- matrix(rnorm(200), ncol=2)

# Create a regular grid
x_seq <- seq(min(X[,1]), max(X[,1]), length.out=10)
y_seq <- seq(min(X[,2]), max(X[,2]), length.out=10)
X.grid <- as.matrix(expand.grid(x_seq, y_seq))

# Find 3 nearest neighbors in X for each grid point
result <- geodesic.knnx(X, X.grid, k=3)

# Access the nearest neighbor indices and distances
nn_indices <- result$nn.index
nn_distances <- result$nn.dist
}

}
\seealso{
\code{\link{geodesic.knn}} for finding geodesic nearest neighbors within a single dataset
\code{\link[FNN]{get.knn}} for Euclidean k-nearest neighbors
\code{\link[FNN]{get.knnx}} for Euclidean k-nearest neighbors between two datasets
}
