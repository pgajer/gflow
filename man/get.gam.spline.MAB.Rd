% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bias_utils.R
\name{get.gam.spline.MAB}
\alias{get.gam.spline.MAB}
\title{Estimate Mean Absolute Bias (MAB) of GAM Spline Model}
\usage{
get.gam.spline.MAB(x, y, xt, yt, folds, y.binary = FALSE)
}
\arguments{
\item{x}{A numeric vector representing the predictor variable for the training set.}

\item{y}{A numeric vector representing the response variable for the training set.}

\item{xt}{A numeric vector representing the predictor variable for the test set.}

\item{yt}{A numeric vector representing the response variable for the test set.}

\item{folds}{A list of indices for cross-validation folds (currently not used in implementation).}

\item{y.binary}{Logical indicating if y is a binary variable (default = FALSE).}
}
\value{
A list containing:
\describe{
\item{MAB}{Mean Absolute Bias calculated on the test set}
\item{RMSE}{Root Mean Square Error}
\item{predictions}{Predictions made by the GAM model on the test set}
\item{residuals}{Absolute residuals}
\item{parameters}{Empty list (for consistency with other functions)}
}
}
\description{
Fits a Generalized Additive Model (GAM) with spline smoothing to a given dataset
and evaluates its performance. For binary outcomes, uses logistic GAM.
}
\details{
This function fits a GAM model using spline smoothing. For binary outcomes,
it uses a binomial family with logit link and returns predicted probabilities.
For continuous outcomes, it uses a Gaussian family.
}
\examples{
\dontrun{
# Generate example data
set.seed(123)
x <- runif(100, 0, 10)
y <- sin(x) + rnorm(100, sd = 0.1)
xt <- seq(0, 10, length.out = 50)
yt <- sin(xt)

# Create cross-validation folds
folds <- create.folds(y, k = 10, list = TRUE, returnTrain = TRUE)

# Run the function
result <- get.gam.spline.MAB(x, y, xt, yt, folds)
print(result$MAB)

# Example with binary data
y.binary <- rbinom(100, 1, plogis(sin(x)))
yt.binary <- plogis(sin(xt))
result.binary <- get.gam.spline.MAB(x, y.binary, xt, yt.binary, folds, y.binary = TRUE)
print(result.binary$MAB)
}

}
